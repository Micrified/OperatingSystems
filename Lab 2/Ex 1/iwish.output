Grammar

    0 $accept: program $end

    1 program: break commandSequence break END
    2        | break END

    3 commandSequence: commandSequence newlines compoundCommand
    4                | compoundCommand

    5 compoundCommand: sequence delim_op
    6                | sequence

    7 $@1: %empty

    8 sequence: sequence delim_op $@1 pipeSequence
    9         | pipeSequence

   10 $@2: %empty

   11 pipeSequence: pipeSequence PIPE $@2 break command
   12             | command

   13 command: word args
   14        | word

   15 args: args word
   16     | args redirection
   17     | word
   18     | redirection

   19 $@3: %empty

   20 redirection: IN $@3 word

   21 $@4: %empty

   22 redirection: OUT $@4 word

   23 break: newlines
   24      | %empty

   25 newlines: newlines NEWLINE
   26         | NEWLINE

   27 delim_op: AMPERSAND
   28         | SEMICOLON

   29 word: WORD


Terminals, with rules where they appear

$end (0) 0
error (256)
AMPERSAND (258) 27
END (259) 1 2
IN (260) 20
NEWLINE (261) 25 26
PIPE (262) 11
OUT (263) 22
SEMICOLON (264) 28
WORD (265) 29


Nonterminals, with rules where they appear

$accept (11)
    on left: 0
program (12)
    on left: 1 2, on right: 0
commandSequence (13)
    on left: 3 4, on right: 1 3
compoundCommand (14)
    on left: 5 6, on right: 3 4
sequence (15)
    on left: 8 9, on right: 5 6 8
$@1 (16)
    on left: 7, on right: 8
pipeSequence (17)
    on left: 11 12, on right: 8 9 11
$@2 (18)
    on left: 10, on right: 11
command (19)
    on left: 13 14, on right: 11 12
args (20)
    on left: 15 16 17 18, on right: 13 15 16
redirection (21)
    on left: 20 22, on right: 16 18
$@3 (22)
    on left: 19, on right: 20
$@4 (23)
    on left: 21, on right: 22
break (24)
    on left: 23 24, on right: 1 2 11
newlines (25)
    on left: 25 26, on right: 3 23 25
delim_op (26)
    on left: 27 28, on right: 5 8
word (27)
    on left: 29, on right: 13 14 15 17 20 22


State 0

    0 $accept: . program $end

    NEWLINE  shift, and go to state 1

    $default  reduce using rule 24 (break)

    program   go to state 2
    break     go to state 3
    newlines  go to state 4


State 1

   26 newlines: NEWLINE .

    $default  reduce using rule 26 (newlines)


State 2

    0 $accept: program . $end

    $end  shift, and go to state 5


State 3

    1 program: break . commandSequence break END
    2        | break . END

    END   shift, and go to state 6
    WORD  shift, and go to state 7

    commandSequence  go to state 8
    compoundCommand  go to state 9
    sequence         go to state 10
    pipeSequence     go to state 11
    command          go to state 12
    word             go to state 13


State 4

   23 break: newlines .
   25 newlines: newlines . NEWLINE

    NEWLINE  shift, and go to state 14

    $default  reduce using rule 23 (break)


State 5

    0 $accept: program $end .

    $default  accept


State 6

    2 program: break END .

    $default  reduce using rule 2 (program)


State 7

   29 word: WORD .

    $default  reduce using rule 29 (word)


State 8

    1 program: break commandSequence . break END
    3 commandSequence: commandSequence . newlines compoundCommand

    NEWLINE  shift, and go to state 1

    $default  reduce using rule 24 (break)

    break     go to state 15
    newlines  go to state 16


State 9

    4 commandSequence: compoundCommand .

    $default  reduce using rule 4 (commandSequence)


State 10

    5 compoundCommand: sequence . delim_op
    6                | sequence .
    8 sequence: sequence . delim_op $@1 pipeSequence

    AMPERSAND  shift, and go to state 17
    SEMICOLON  shift, and go to state 18

    $default  reduce using rule 6 (compoundCommand)

    delim_op  go to state 19


State 11

    9 sequence: pipeSequence .
   11 pipeSequence: pipeSequence . PIPE $@2 break command

    PIPE  shift, and go to state 20

    $default  reduce using rule 9 (sequence)


State 12

   12 pipeSequence: command .

    $default  reduce using rule 12 (pipeSequence)


State 13

   13 command: word . args
   14        | word .

    IN    shift, and go to state 21
    OUT   shift, and go to state 22
    WORD  shift, and go to state 7

    $default  reduce using rule 14 (command)

    args         go to state 23
    redirection  go to state 24
    word         go to state 25


State 14

   25 newlines: newlines NEWLINE .

    $default  reduce using rule 25 (newlines)


State 15

    1 program: break commandSequence break . END

    END  shift, and go to state 26


State 16

    3 commandSequence: commandSequence newlines . compoundCommand
   23 break: newlines .
   25 newlines: newlines . NEWLINE

    NEWLINE  shift, and go to state 14
    WORD     shift, and go to state 7

    $default  reduce using rule 23 (break)

    compoundCommand  go to state 27
    sequence         go to state 10
    pipeSequence     go to state 11
    command          go to state 12
    word             go to state 13


State 17

   27 delim_op: AMPERSAND .

    $default  reduce using rule 27 (delim_op)


State 18

   28 delim_op: SEMICOLON .

    $default  reduce using rule 28 (delim_op)


State 19

    5 compoundCommand: sequence delim_op .
    8 sequence: sequence delim_op . $@1 pipeSequence

    WORD      reduce using rule 7 ($@1)
    $default  reduce using rule 5 (compoundCommand)

    $@1  go to state 28


State 20

   11 pipeSequence: pipeSequence PIPE . $@2 break command

    $default  reduce using rule 10 ($@2)

    $@2  go to state 29


State 21

   20 redirection: IN . $@3 word

    $default  reduce using rule 19 ($@3)

    $@3  go to state 30


State 22

   22 redirection: OUT . $@4 word

    $default  reduce using rule 21 ($@4)

    $@4  go to state 31


State 23

   13 command: word args .
   15 args: args . word
   16     | args . redirection

    IN    shift, and go to state 21
    OUT   shift, and go to state 22
    WORD  shift, and go to state 7

    $default  reduce using rule 13 (command)

    redirection  go to state 32
    word         go to state 33


State 24

   18 args: redirection .

    $default  reduce using rule 18 (args)


State 25

   17 args: word .

    $default  reduce using rule 17 (args)


State 26

    1 program: break commandSequence break END .

    $default  reduce using rule 1 (program)


State 27

    3 commandSequence: commandSequence newlines compoundCommand .

    $default  reduce using rule 3 (commandSequence)


State 28

    8 sequence: sequence delim_op $@1 . pipeSequence

    WORD  shift, and go to state 7

    pipeSequence  go to state 34
    command       go to state 12
    word          go to state 13


State 29

   11 pipeSequence: pipeSequence PIPE $@2 . break command

    NEWLINE  shift, and go to state 1

    $default  reduce using rule 24 (break)

    break     go to state 35
    newlines  go to state 4


State 30

   20 redirection: IN $@3 . word

    WORD  shift, and go to state 7

    word  go to state 36


State 31

   22 redirection: OUT $@4 . word

    WORD  shift, and go to state 7

    word  go to state 37


State 32

   16 args: args redirection .

    $default  reduce using rule 16 (args)


State 33

   15 args: args word .

    $default  reduce using rule 15 (args)


State 34

    8 sequence: sequence delim_op $@1 pipeSequence .
   11 pipeSequence: pipeSequence . PIPE $@2 break command

    PIPE  shift, and go to state 20

    $default  reduce using rule 8 (sequence)


State 35

   11 pipeSequence: pipeSequence PIPE $@2 break . command

    WORD  shift, and go to state 7

    command  go to state 38
    word     go to state 13


State 36

   20 redirection: IN $@3 word .

    $default  reduce using rule 20 (redirection)


State 37

   22 redirection: OUT $@4 word .

    $default  reduce using rule 22 (redirection)


State 38

   11 pipeSequence: pipeSequence PIPE $@2 break command .

    $default  reduce using rule 11 (pipeSequence)
